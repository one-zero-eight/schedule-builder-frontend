/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/collisions/check': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Check Timetable Collisions */
    get: operations['check_timetable_collisions_collisions_check_get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/dev/bookings': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get All Bookings */
    get: operations['get_all_bookings_dev_bookings_get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/dev/bookings/{room_id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get Bookings */
    get: operations['get_bookings_dev_bookings__room_id__get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/dev/rooms': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get Rooms */
    get: operations['get_rooms_dev_rooms_get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/options/set-semester': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Set Semester */
    post: operations['set_semester_options_set_semester_post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/options/semester': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get Semester */
    get: operations['get_semester_options_semester_get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/options/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get All Options */
    get: operations['get_all_options_options__get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/options/set-teachers': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Set Teachers */
    post: operations['set_teachers_options_set_teachers_post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/options/teachers': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get Teachers */
    get: operations['get_teachers_options_teachers_get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    /**
     * BookingDTO
     * @description Booking description
     */
    BookingDTO: {
      /**
       * Room Id
       * @description ID of the room
       */
      room_id: string;
      /**
       * Event Id
       * @description ID of the event
       */
      event_id: string | null;
      /**
       * Title
       * @description Title of the booking
       */
      title: string;
      /**
       * Start Time
       * Format: date-time
       * @description Start time of booking
       */
      start_time: string;
      /**
       * End Time
       * Format: date-time
       * @description End time of booking
       */
      end_time: string;
    };
    /**
     * CapacityIssue
     * @description Issue when there is not enough places in the room for the lesson.
     */
    CapacityIssue: {
      /**
       * @description discriminator enum property added by openapi-typescript
       * @enum {string}
       */
      collision_type: CapacityIssueCollision_type;
      /**
       * Room
       * @description Room name
       */
      room: string | string[];
      /**
       * Room Capacity
       * @description Assumed capacity of the room
       */
      room_capacity: number | null;
      /**
       * Needed Capacity
       * @description Needed capacity for the lesson (sum of all groups)
       */
      needed_capacity: number;
      lesson: components['schemas']['LessonWithExcelCellsDTO'];
    };
    /** CheckResults */
    CheckResults: {
      /** Issues */
      issues: components['schemas']['Issue'][];
    };
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: components['schemas']['ValidationError'][];
    };
    Issue:
      | components['schemas']['CapacityIssue']
      | components['schemas']['RoomIssue']
      | components['schemas']['OutlookIssue']
      | components['schemas']['TeacherIssue'];
    /** LessonWithExcelCellsDTO */
    LessonWithExcelCellsDTO: {
      /**
       * Lesson Name
       * @description Name of the lesson
       */
      lesson_name: string;
      /**
       * Weekday
       * @description Weekday of a lesson
       */
      weekday: string | null;
      /**
       * Start Time
       * Format: time
       * @description Start time of lesson
       */
      start_time: string;
      /**
       * End Time
       * Format: time
       * @description End time of lesson
       */
      end_time: string;
      /**
       * Room
       * @description Room for lesson, None - TBA, if list - multiple rooms simultaneously
       */
      room: string | string[] | null;
      /**
       * Date On
       * @description Specific dates with lessons
       */
      date_on: string | null;
      /**
       * Date Except
       * @description Specific dates when there is no lessons
       */
      date_except: string[] | null;
      /**
       * Teacher
       * @description Teacher on lesson
       */
      teacher: string;
      /**
       * Teacher Email
       * @description Email of teacher
       */
      teacher_email: string | null;
      /**
       * Group Name
       * @description Name of the group or list of groups
       */
      group_name: string | string[] | null;
      /**
       * Students Number
       * @description Number of students in the group
       */
      students_number: number;
      /**
       * Excel Range
       * @description Range of the lessos: may be multiple cells, for example 'A1:A10'
       */
      excel_range: string | null;
    };
    /** OptionsData */
    OptionsData: {
      semester: components['schemas']['SemesterOptions'] | null;
      teachers: components['schemas']['TeachersData'] | null;
    };
    /**
     * OutlookIssue
     * @description Issue when there is a Outlook booking in the room at the same time as the lesson.
     */
    OutlookIssue: {
      /**
       * @description discriminator enum property added by openapi-typescript
       * @enum {string}
       */
      collision_type: OutlookIssueCollision_type;
      /**
       * Outlook Info
       * @description Outlook info about the booking in the room same time
       */
      outlook_info: components['schemas']['BookingDTO'][];
      lesson: components['schemas']['LessonWithExcelCellsDTO'];
    };
    /**
     * RoomDTO
     * @description Room description.
     */
    RoomDTO: {
      /**
       * Id
       * @description Room slug
       */
      id: string;
      /**
       * Title
       * @description Room title
       */
      title: string | null;
      /**
       * Short Name
       * @description Shorter version of room title
       */
      short_name: string | null;
      /**
       * My Uni Id
       * @description ID of room on My University portal
       */
      my_uni_id: number | null;
      /**
       * Capacity
       * @description Room capacity, amount of people
       */
      capacity: number | null;
      /**
       * Access Level
       * @description Access level to the room. Yellow = for students. Red = for employees. Special = special rules apply.
       */
      access_level: RoomDTOAccess_level | null;
      /**
       * Restrict Daytime
       * @description Prohibit to book during working hours. True = this room is available only at night 19:00-8:00, or full day on weekends.
       * @default false
       */
      restrict_daytime: boolean;
    };
    /**
     * RoomIssue
     * @description Issue when there are multiple lessons in the room at the same time.
     */
    RoomIssue: {
      /**
       * @description discriminator enum property added by openapi-typescript
       * @enum {string}
       */
      collision_type: RoomIssueCollision_type;
      /**
       * Room
       * @description Room name
       */
      room: string | string[];
      /**
       * Lessons
       * @description Lessons in the room at the same time
       */
      lessons: components['schemas']['LessonWithExcelCellsDTO'][];
    };
    /** SemesterOptions */
    SemesterOptions: {
      /** Name */
      name: string;
      /**
       * Start Date
       * Format: date
       */
      start_date: string;
      /**
       * End Date
       * Format: date
       */
      end_date: string;
    };
    /** Teacher */
    Teacher: {
      /** Name */
      name: string;
      /** Email */
      email: string | null;
      /** Alias */
      alias: string | null;
      /** Student */
      student: string | null;
    };
    /**
     * TeacherIssue
     * @description Issue when there is a teacher with multiple lessons at the same time, or when teacher study in the same time as the lesson.
     */
    TeacherIssue: {
      /**
       * @description discriminator enum property added by openapi-typescript
       * @enum {string}
       */
      collision_type: TeacherIssueCollision_type;
      /**
       * Teacher
       * @description Teacher name
       */
      teacher: string;
      /**
       * Teaching Lessons
       * @description Lessons of the teacher at the same time
       */
      teaching_lessons: components['schemas']['LessonWithExcelCellsDTO'][];
      /**
       * Studying Lessons
       * @description Lessons of the teacher as a student at the same time
       */
      studying_lessons: components['schemas']['LessonWithExcelCellsDTO'][];
    };
    /** TeachersData */
    TeachersData: {
      /**
       * Data
       * @default []
       */
      data: components['schemas']['Teacher'][];
    };
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (string | number)[];
      /** Message */
      msg: string;
      /** Error Type */
      type: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type SchemaBookingDto = components['schemas']['BookingDTO'];
export type SchemaCapacityIssue = components['schemas']['CapacityIssue'];
export type SchemaCheckResults = components['schemas']['CheckResults'];
export type SchemaHttpValidationError =
  components['schemas']['HTTPValidationError'];
export type SchemaIssue = components['schemas']['Issue'];
export type SchemaLessonWithExcelCellsDto =
  components['schemas']['LessonWithExcelCellsDTO'];
export type SchemaOptionsData = components['schemas']['OptionsData'];
export type SchemaOutlookIssue = components['schemas']['OutlookIssue'];
export type SchemaRoomDto = components['schemas']['RoomDTO'];
export type SchemaRoomIssue = components['schemas']['RoomIssue'];
export type SchemaSemesterOptions = components['schemas']['SemesterOptions'];
export type SchemaTeacher = components['schemas']['Teacher'];
export type SchemaTeacherIssue = components['schemas']['TeacherIssue'];
export type SchemaTeachersData = components['schemas']['TeachersData'];
export type SchemaValidationError = components['schemas']['ValidationError'];
export type $defs = Record<string, never>;
export interface operations {
  check_timetable_collisions_collisions_check_get: {
    parameters: {
      query: {
        google_spreadsheet_id: string;
        target_sheet_name: string;
        check_room_collisions?: boolean;
        check_teacher_collisions?: boolean;
        check_space_collisions?: boolean;
        check_outlook_collisions?: boolean;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Timetable collisions */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['CheckResults'];
        };
      };
      /** @description Invalid token OR no credentials provided */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  get_all_bookings_dev_bookings_get: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['BookingDTO'][];
        };
      };
    };
  };
  get_bookings_dev_bookings__room_id__get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        room_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['BookingDTO'][];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  get_rooms_dev_rooms_get: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['RoomDTO'][];
        };
      };
    };
  };
  set_semester_options_set_semester_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['SemesterOptions'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['SemesterOptions'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  get_semester_options_semester_get: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['SemesterOptions'] | null;
        };
      };
    };
  };
  get_all_options_options__get: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['OptionsData'];
        };
      };
    };
  };
  set_teachers_options_set_teachers_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'text/tab-separated-values': string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': number;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  get_teachers_options_teachers_get: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['TeachersData'] | null;
        };
      };
    };
  };
}
export enum CapacityIssueCollision_type {
  capacity = 'capacity',
}
export enum OutlookIssueCollision_type {
  outlook = 'outlook',
}
export enum RoomDTOAccess_level {
  yellow = 'yellow',
  red = 'red',
  special = 'special',
}
export enum RoomIssueCollision_type {
  room = 'room',
}
export enum TeacherIssueCollision_type {
  teacher = 'teacher',
}
